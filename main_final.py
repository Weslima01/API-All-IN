# ========================== IMPORTA√á√ïES ==========================
import time
import os
import traceback
from datetime import datetime

from api_client import optout_info, get_encerradas_info, relatorio_envio, relatorio_abertura, relatorio_clique
from tratamento import tratamento_get_encerradas_info, tratamento_relatorio_envio, tratamento_relatorio_abertura, tratamento_relatorio_clique, tratamento_optout_info
from envio_email import enviar_email_com_anexos
from requerimento_all import executar_fluxo_spam
from download_all import executar_download_denuncias
# from db_utils import upload_excel_to_mysql_incremental

# ========================== CONFIGURA√á√ïES ==========================

PASTA_DOWNLOADS = os.path.join(os.path.expanduser("~"), "Downloads")

DESTINATARIO = "alline.tozzi@neotass.com.br"
CC = ["levy.ramalho@neotass.com.br"]

ARQUIVOS_FIXOS = [
    r"C:\Users\Wesley\OneDrive - NEOTASS PUBLICIDADE E PRODUCOES LT\Python\allin_pipeline\dados\silver\get_encerradas_info.xlsx",
    r"C:\Users\Wesley\OneDrive - NEOTASS PUBLICIDADE E PRODUCOES LT\Python\allin_pipeline\dados\silver\get_envio_info.xlsx",
    r"C:\Users\Wesley\OneDrive - NEOTASS PUBLICIDADE E PRODUCOES LT\Python\allin_pipeline\dados\silver\relatorio_abertura.xlsx",
    r"C:\Users\Wesley\OneDrive - NEOTASS PUBLICIDADE E PRODUCOES LT\Python\allin_pipeline\dados\silver\relatorio_clique.xlsx",
    r"C:\\Users\\WesleyLimaNeotassMar\\Python\\api_all_in-main\\dados\\raw\\dados_api_optout.xlsx",
]

# ========================== FUN√á√ÉO MAIN ==========================

def main():
    print("üîÑ Iniciando o processamento dos relat√≥rios...")

    # ========================== ETAPA 1 - API e Tratamento ==========================
    try:
        print("üì• Obtendo informa√ß√µes optout...")
        optout_info()
        print("‚úÖ Informa√ß√µes de optput obtidas!")

        print("üì• Obtendo informa√ß√µes encerradas...")
        get_encerradas_info()
        print("‚úÖ Informa√ß√µes encerradas obtidas!")

        print("üõö Tratando informa√ß√µes encerradas...")
        tratamento_get_encerradas_info()
        print("‚úÖ Tratamento de encerradas conclu√≠do!")

        print("üìä Gerando relat√≥rio de envio...")
        relatorio_envio()
        print("‚úÖ Relat√≥rio de envio gerado!")

        print("üõö Tratando relat√≥rio de envio...")
        tratamento_relatorio_envio()
        print("‚úÖ Tratamento de envio conclu√≠do!")

        print("üìä Gerando relat√≥rio de abertura...")
        relatorio_abertura()
        print("‚úÖ Relat√≥rio de abertura gerado!")

        print("üõö Tratando relat√≥rio de abertura...")
        tratamento_relatorio_abertura()
        print("‚úÖ Tratamento de abertura conclu√≠do!")

        print("üìä Gerando relat√≥rio de cliques...")
        relatorio_clique()
        print("‚úÖ Relat√≥rio de cliques gerado!")

        print("üõö Tratando relat√≥rio de cliques...")
        tratamento_relatorio_clique()
        print("‚úÖ Tratamento de cliques conclu√≠do!")

    except Exception:
        print("‚ùå Erro durante execu√ß√£o da etapa de API e tratamento:")
        traceback.print_exc()

    # ========================== ETAPA 2 - Verifica√ß√£o de SPAM ==========================
    print("\nüß≠ Executando verifica√ß√£o de SPAM...")
    try:
        campanhas_ids, log_spam = executar_fluxo_spam()
        print("‚úÖ Verifica√ß√£o de SPAM conclu√≠da.")
    except Exception:
        print("‚ùå Erro na execu√ß√£o da verifica√ß√£o de SPAM.")
        traceback.print_exc()
        campanhas_ids, log_spam = [], []

    # ========================== ESPERA 30 MINUTOS ==========================
    print("\n‚è≥ Aguardando 30 minutos antes do download de den√∫ncias...")
    time.sleep(1800)

    # ========================== ETAPA 3 - Download de Den√∫ncias ==========================
    print("\nüì• Executando download e unifica√ß√£o de den√∫ncias...")
    try:
        arquivo_denuncias = executar_download_denuncias(ids_campanha=campanhas_ids, log_previo=log_spam)
        print("‚úÖ Download e unifica√ß√£o conclu√≠dos.")
    except Exception:
        print("‚ùå Erro na execu√ß√£o do download de den√∫ncias.")
        traceback.print_exc()
        arquivo_denuncias = None

    # ========================== ETAPA 4 - Envio de E-mail ==========================
    print("\nüìß Preparando envio de e-mail...")

    # Montar lista de anexos
    log_final = os.path.join(PASTA_DOWNLOADS, "status_execucao_allin.txt")

    arquivos_para_anexar = ARQUIVOS_FIXOS + [arquivo_denuncias if arquivo_denuncias else "", log_final]
    arquivos_existentes = [arquivo for arquivo in arquivos_para_anexar if os.path.exists(arquivo)]

    if arquivos_existentes:
        print(f"üìÇ Anexando {len(arquivos_existentes)} arquivos encontrados...")
        enviar_email_com_anexos(DESTINATARIO, arquivos_existentes, cc=CC)
        print("‚úÖ E-mail enviado com sucesso! üöÄ")
    else:
        print("‚ùå Nenhum arquivo encontrado. E-mail n√£o enviado.")

# # ========================== EXECU√á√ÉO STANDALONE ==========================

# if __name__ == "__main__":
#     main()
